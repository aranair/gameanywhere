#summary GameAnywhere API and User Guide for Test Driver.
 
GameLibrary
 
 
Private Data Members
 
Type: string
Name:  OSType
Description: Type of OS that the current system is running on.

Type: List<Game>
Name: installedGameList
Description: List of installed games on the computer, will always be updated if Propeties is called.

Type: bool
Name: Is64BitOS
Description: returns a bool to whether current machine is running on a 64bit OS or not.

Type:  string
Name: ProgramFilesX86
Description: returns a string(path) to the program files directory according to the type of OS.

Type:  string
Name: RegistrySoftwarePath
Description: Returns a path (string) to the registry software directory according to the type of OS.

Type:  string
Name: DocumentsPath
Description: Returns a path(string) to the shell folder: Documents directory according to the OS.


Public Data Members
 
Type: static readonly string
Name: Warcraft3GameName
Description: The full game name used for Warcraft 3.

Type: static readonly string
Name: FIFA10GameName
Description: The full game name used for FIFA10.

Type: static readonly string
Name: FM2010GameName
Description: The full game name used for FM2010.

Type: static readonly string
Name:  WOWGameName
Description: The full game name used for WOW.

 
Private Methods
 
 
Name: Initialize
Pre-Conditions:  -
Post-Conditions: All the games that are supported by the current version of the program will be initialized into the list of installed games.
Description: Initializes each of the currently supported games.
Parameters: -
Return Type: void
Exceptions: -


Name: AddGamesSupportedByThumbdrive
Pre-Conditions: Synchronization direction chosen by user is external thumbdrive to computer.
Post-Conditions: A new list of games which are in common with both the thumbdrive and the computer will be initialized with the appropriate config files lists / saved games lists.
Description: Searches the corresponding folders of the external thumbdrive for each game in the master installedGameList
to see if there are config or saved game files available for them, and edit the config files list, saved game files list
accordingly.
Parameters: ref List<Game> newList - The new list to add the common games into.
Return Type: void
Exceptions: -
 

Name: AddGameToExternalCommonList
Pre-Conditions: Game exists in the external thumbdrive and computer.
Post-Conditions: Game that is passed in will be added into the new common list with the config file list and saved games list set up properly.
Description: Adds a game into the new list of common games.
Parameters:
Game installedGame - Game to be added in
ref List<Game> newList - List of games to add the game into.
Return Type: void
Exceptions: -
 

Name:  EditConfigAndSavedGameLists
Pre-Conditions: Synchronization direction has been chosen by user.
Post-Conditions:  All the files to be
Description: Edits the config and saved game lists of the game in common,  according to the direction.
Parameters:
ref Game newGame - The game in common with both sync sides, and also to be editted with the source's config file lists and saved game list.
int direction - Synchronization direction chosen by user.
Return Type: void
Exceptions: -
 

Name: AddToInstalledGames
Pre-Conditions: Valid game, list of games initialized by class.
Post-Conditions: Game added into the list of games.
Description: Adds a game into the installedGameList
Parameters: Game game - game to be added into the installedGameList.
Return Type: -
Exceptions: -



Name: GetOSName
Pre-Conditions: -
Post-Conditions: -
Description: Finds current OS name through a series of checks
Parameters: -
Return Type: string OSName - name of the current OS.
Exceptions: -


Name: InitializeFIFA2010
Pre-Conditions: -
Post-Conditions: If FIFA10 is installed on the computer and folder is accessible, game object containing the corresponding config files list and game files list will be added into the list of installed games.
Description: Initializes FIFA 2010 into list of installed (if present)
Parameters: -
Return Type: -
Exceptions:


Name: InitializeFIFAConfigList
Pre-Conditions: -
Post-Conditions: If FIFA2010 is installed on the computer and the config folder is accessible, the game's config files list will be added with the folder.
Description: Initializes the config list for FIFA10
Parameters:
ref Game newGame - Game instance to be editted.
string configPath - config files's parent path for FIFA10
Return Type: -
Exceptions: -


Name: InitializeFIFASavedGameList
Pre-Conditions: -
Post-Conditions: If FIFA2010 is installed on the computer and the saved game folders are accessible, the game's saved game files list will be modified and added on with the available folders.
Description: Initializes the saved game list for FIFA10
Parameters:
ref Game newGame - Game instance to be editted.
string saveParentPath -Saved game parent path of FIFA10.
Return Type: -
Exceptions: -


Name: InitializeWarcraft3
Pre-Conditions: -
Post-Conditions: If Warcraft 3 is installed on the computer and folder is accessible, game object containing the corresponding config files list and game files list will be added into the list of installed games.
Description: Initializes Warcraft 3 into list of installed (if present)
Parameters: -
Return Type: -
Exceptions: -


Name: InitializeWarcraft3SavedGameList
Pre-Conditions:
Post-Conditions:  If Warcraft 3 is installed on the computer and the saved game folders are accessible, the game's saved game files list will be modified and added on with the available folders.
Description: Initializes the saved game list for Warcraft 3
Parameters:
ref Game newGame - Game instance to be editted.
string saveParentPath -Saved game parent path of Warcraft 3
Return Type: -
Exceptions: -


Name: InitializeWarcraft3ConfigList
Pre-Conditions:
Post-Conditions:  If Warcraft 3 is installed on the computer and the saved game folders are accessible, the game's config files list will be modified and added on with the available folders.
Description: Initializes the config files list for Warcraft 3
Parameters:
ref Game newGame - Game instance to be editted.
string configPath - config files's parent path for Warcraft 3
Return Type: -
Exceptions: -


Name: InitializeFM2010
Pre-Conditions: -
Post-Conditions: If Football Manger 2010 is installed on the computer and folder is accessible, game object containing the corresponding config files list and game files list will be added into the list of installed games.
Description: Initializes Football Manger 2010 into list of installed (if present)
Parameters: -
Return Type: -
Exceptions: -


Name: InitializeFM2010SavedGameList
Pre-Conditions:
Post-Conditions:  If Football Manger 2010 is installed on the computer and the saved game folders are accessible, the game's saved game files list will be modified and added on with the available folders.
Description: Initializes the saved game list for Football Manger 2010
Parameters:
ref Game newGame - Game instance to be editted.
string saveParentPath -Saved game parent path of Football Manger 2010
Return Type: -
Exceptions: -

Name: InitializeWOW
Pre-Conditions: -
Post-Conditions: If World of Warcraft is installed on the computer and folder is accessible, game object containing the corresponding config files list and game files list will be added into the list of installed games.
Description: Initializes World of Warcraft into list of installed (if present)
Parameters: -
Return Type: -
Exceptions: -


Name: InitializeWOWSavedGameList
Pre-Conditions:
Post-Conditions:  If World of Warcraft is installed on the computer and the saved game folders are accessible, the game's saved game files list will be modified and added on with the available folders.
Description: Initializes the saved game list for World of Warcraft
Parameters:
ref Game newGame - Game instance to be editted.
string saveParentPath -Saved game parent path of World of Warcraft
Return Type: -
Exceptions: -


Name: InitializeWOWConfigList
Pre-Conditions:
Post-Conditions:  If World of Warcraft is installed on the computer and the saved game folders are accessible, the game's config files list will be modified and added on with the available folders.
Description: Initializes the config files list for World of Warcraft
Parameters:
ref Game newGame - Game instance to be editted.
string configPath - config files's parent path for World of Warcraft
Return Type: -
Exceptions: -
 
 
 
Public Methods
 
 
Name: GameLibrary
Pre-Conditions: -
Post-Conditions: Type of OS of current running system is found.
Description: Default Constructor
Parameters: -
Return Type: void
Exceptions: -


Name: RefreshList
Pre-Conditions: -
Post-Conditions: List of installed games in the class is updated with the newest games and their corresponding files.
Description: Reinitialize each game to look for new files, and updates the list of installed games.
Parameters: -
Return Type: void
Exceptions: -


Name:  GetGameList
Pre-Conditions: User has chosen a direction, and direction passed in is valid.
Post-Conditions: A list of common games, corresponding to the direction argument passed in, is returned.
Description: Returns a common games list, corresponding to the direction passed in.
Parameters:
int direction -  Direction of synchronization
Return Type: List<Game>, List of installed games that are compatible with the direction.
Exceptions: -



Game

Private Data Members

All these are also propeties, get/set with the same name but capitalize the first letter of the data member name to access and set.
Type: List<string>
Name: savePathList
Description: List of config files or folders for the game.

Type: List<string>
Name: configPathList
Description: List of saved game files or folders for the game.

Type: string
Name:  name
Description: Name of the game.

Type: string
Name:  installPath
Description: Install path of the game.

Type: string
Name:  configParentPath
Description: The parent folder where the list of config files or folders of the game are located.

Type: string
Name:  saveParentPath
Description: The parent folder where the list of saved game files or folders of the game are located.


SyncAction

Public Data Members

Type: Game
Name: myGame
Description: A game object.

Type: int
Name: action
Description: This action refers to the sync action that would be carried out for the game. Refer to static members for the list of sync actions.

Type: List<SyncError>
Name: unsuccessfulSyncFiles
Description: This list will store all the files that cannot be synced.

Static Public Attributes

Type: int
Name: DoNothing
Description: The default sync action.

Type: int
Name: SavedGameFiles
Description: To sync only the saved games files.

Type: int
Name: ConfigFiles
Description: To sync only the game configuration files.

Type: int
Name: AllFiles
Description: To sync both the game configuration files and the saved game files.

Public Methods

Name:  SyncAction
Pre-Conditions: -
Post-Conditions: Set the Game and the sync action.
Description: Constructor
Parameters:
Game game - A game object.
int action - The sync action.
Return Type: -
Exceptions: -



SyncError


Public Data Members

Type: string
Name: filePath

Description: The path that has error.


Type: string
Name: processName

Description: The process that encountered this error.


Type: string
Name: errorMessage

Description: The error message encountered.


Public Methods

Name:  SyncError
Pre-Conditions: -
Post-Conditions: Set the error path, the process name and the error message.
Description: Overloaded Contructor.
Parameters:
string path
string process
string message
Return Type: -
Exceptions: -



OfflineSync


Public Data Members

Type: int
Name: SyncDirection

Description: Synchronization direction.

Static Public Attributes

Type: string
Name: BackupConfigFolderName
Description: Folder name.

Type: string
Name: BackupSavedGameFolderName
Description: Folder name.

Type: string
Name: SyncFolderSavedGameFolderName
Description: Folder name.

Type: string
Name: SyncFolderConfigFolderName
Description: Folder name.

Type: int
Name: Uninitialize
Description: Sync direction, default value.

Type: int
Name: ExternalToCom
Description: Sync direction, from external storage device to computer.

Type: int
Name: ExternalToCom
Description: Sync direction, from external storage device to computer


Public Methods


Name:  OfflineSync
Pre-Conditions: -
Post-Conditions:  Set the direction of synchronization and the installed game list.
Description:
Overloaded constructor.
Parameters:
int direction - Synchronization direction.
List<Game> gameList - The list of installed games.
Return Type: -
Exceptions: -

Name:  SynchronizeGames
Pre-Conditions: -
Post-Conditions:  Original game files on computer will be backup into a GA-Backup folder in the same directory as the game file before overwriting with the files from external sotrage device. Previous game files in the external storage device would be removed when updating.
syncActionList.unsuccessfulSyncFiles would contain the list of game files that could not be synced.
Description:
Given the direction of synchronization, SynchronizeGames will copy saved game files and/or game configuration files between computer and external storage device.
Parameters:
List<SyncAction> list - List of games which are to be synchronized.
Return Type: List<SyncAction> - List of games and their sync results.
Exceptions: -

Name:  CheckBackupExists
Pre-Conditions: -
Post-Conditions:  Identified if a given path contains any backup folder.
Description:
Determine if backup folder exists.
Parameters:
string path - The source path.
string backupFolderName - The name of the backup folder to look for.
Return Type: bool - true if backup exists.
Exceptions: -

Name:  Restore
Pre-Conditions: -
Post-Conditions:  Replace the saved game files and game configuration files with the backup files on the computer. Backup folders will be removed.
Description:
Restore the computer game files to original state.
Parameters: -
Return Type: List<SyncAction> - The list of SyncAction that contain failed restore files.
Exceptions: -

Name:  RemoveAllBackup
Pre-Conditions: -
Post-Conditions:  Deletes all backup folder created by GameAnywhere after syncing.
Description: Deletes all backup folder created by GameAnywhere after syncing.
Parameters: List<SyncAction> syncActionList - The list of SyncAction that has backup folders.
Return Type: LList<SyncError> - A list of SyncError of the given path.
Exceptions: DeleteDirectoryErrorException() - Unable to remove backup folder.

Additional Comments on How the Class Works:
 
Brief Description: This class handles the file/folder manipulation on the computer and the external storage device. The sync direction can only be set once, so as to prevent accidental re-assignment and affecting other methods. This method would create a folder call "syncFolder". This folder would contain the game files that is assume to be in the external storage device.

The folder structure in "syncFolder" is that its subfolders are the game folder(s). Each would game folder is named after the game. In each game folder, it would contain subfolder(s) of name "config" and/or "savedGame". These folder would save the game files as its name suggest.

Steps for synchronizing from External storage device to Computer
1) Create a backup folder in the game file parent directory
2) Move original game files in the computer into the backup folder
3) Copy the game files in the external storage device into the computer

Steps for synchronizing from Computer to External storage device
1) Remove existing game files in external storage device
2) Create the necessary game folder structure* in the external storage device
3) Copy game files from computer into the new directory

Steps for restore
1) Remove existing game files
2) Move game files from backup folder into it's original directory
3) Remove backup folder




User

 

 

Private Data Members

 

Type: string

Name: email

Description: Email of the user.

 

Type: string

Name: password

Description: Password of the user.

 

Type: SimpleDB

Name: db

Description: Object to do database operations.

 

Type: UserState

Name: state

Description: Stores the state of the user (The 2 states are UserLoggedIn, Guest).

 

 

 

Public Data Members

 

Type: string

Name: password

Description: Password of the user.

 

 

 

Private Methods

 

Name: UserExists

Pre-Conditions: email cannot be null or empty string.

Post-Conditions: Returns true if user account exists in GameAnywhere database, else return false.

Description: Checks if user exists in GameAnywhere database.

Parameters:

string email

Return Type: bool

Exceptions: ArgumentException, System.Net.WebException

 

 

Name: IsAccountActivated

Pre-Conditions: email cannot be null or empty string.

Post-Conditions: Returns true if user’s account is activated, else return false.

Description: Checks if user’s account has been activated in GameAnywhere database.

Parameters:

string email

Return Type: bool

Exceptions: ArgumentException, System.Net.WebException

 

 

Name: SendActivationEmail

Pre-Conditions: email cannot be null or empty string. password cannot be null or empty string. activationKey cannot be null or empty string.

Post-Conditions: An activation email is sent to the user’s email.

Description: Send activation email to user.

Parameters:

string email

string password

string activationKey

Return Type: void

Exceptions: ArgumentException, System.Net.Mail.SmtpException

 

 

Name: SendPasswordEmail

Pre-Conditions: email cannot be null or empty string. password cannot be null or empty string.

Post-Conditions: An email with the user’s password is sent to the user’s email.

Description: Send user’s password by email.

Parameters:

string email

string password

Return Type: void

Exceptions: ArgumentException, System.Net.Mail.SmtpException

 

 

Name: CreateMD5Hash

Pre-Conditions: input cannot be null or empty string.

Post-Conditions: A unique string of uppercase characters.

Description: Used to generate a MD5 hash base on the input.

Parameters:

string input

Return Type: string

Exceptions: ArgumentException

 

 

 

Public Methods

 

Name: Login

Pre-Conditions: email cannot be null or empty string. password cannot be null or empty string.

Post-Conditions: Returns true if user exists in GameAnywhere database and state changes to UserLoggedIn. Else false if wrong password / user does not exist / user exists but not activated.

Description: Login user.

Parameters:

string email

string password

Return Type: bool

Exceptions: ConnectionFailureException

 

 

Name: Register

Pre-Conditions: email cannot be null or empty string. password cannot be null or empty string.

Post-Conditions: Returns ‘1’ when registration is complete, ‘2’ if there is a duplicate user account, and ‘3’ if user account is unactivated.

Description: Registers a new account with GameAnywhere.

Parameters:

string email

string password

Return Type: int

Exceptions: ConnectionFailureException

 

 

Name: RetrievePassword

Pre-Conditions: email cannot be null or empty string.

Post-Conditions: Returns ‘1’ when email is sent to user’s email successfully, ‘2’ if user is registered but account not activated yet, ‘3’ if user does not exist in GameAnywhere database. Return values ‘2’ and ‘3’ will not send out any email.

Description: Retrieve user’s password. An email will be sent to the user’s email with the password.

Parameters:

string email

Return Type: int

Exceptions: ConnectionFailureException

 

 

Name: ChangePassword

Pre-Conditions: email cannot be null or empty string. oldPassword cannot be null or empty string. newPassword cannot be null or empty string.

Post-Conditions: Returns ‘1’ when user’s password is changed successfully, ‘2’ if old password provided is invalid, ‘3’ if user account does not exist in GameAnywhere database.

Description: Change user’s password.

Parameters:

string email

string oldPassword

string newPassword

Return Type: int

Exceptions: ConnectionFailureException

 

 

Name: ResendActivation

Pre-Conditions: email cannot be null or empty string. inputPassword cannot be null or empty string.

Post-Conditions: Returns ‘1’ when activation email is sent successfully, ‘2’ if user’s account has already been activated, ‘3’ if user account does not exist in GameAnywhere database.

Description: Resends activation email to user to activate account.

Parameters:

string email

string inputPassword

Return Type: int

Exceptions: ConnectionFailureException

 

 

Name: IsLoggedIn

Pre-Conditions: email cannot be null or empty string.

Post-Conditions: Returns true if state is in UserLoggedIn, else false if state is in Guest.

Description: Checks if user is logged in to GameAnywhere.

Parameters: -

Return Type: bool

Exceptions: -

 

 

 

SimpleDB

 

 

Private Data Members

 

Type: AmazonSimpleDBClient

Name: sdb

Description: SimpleDB object to communicate with amazon simpleDB web service.

 

Type: string

Name: domain

Description: Domain(also known as a database table) in amazon simpleDB.

 

 

 

Public Methods

 

Name: SimpleDB

Pre-Conditions: UserAccounts domain setup in Amazon SimpleDB.

Post-Conditions: Creates an AmazonSimpleDBClient instance and sets the domain.

Description: Constructor for SimpleDB class. It creates a Amazon SimpleDB Client object to communicate with Amazon SimpleDB web service.

Parameters: -

Return Type: void

Exceptions: AmazonSimpleDBException, System.Net.WebException

 

 

Name: InsertItem

Pre-Conditions: itemId cannot be null or empty string. password cannot be null or empty string. activationKey cannot be null or empty string.

Post-Conditions: A new item is inserted to Amazon’s SimpleDB.

Description: Inserts item to SimpleDB.

Parameters:

string itemId

string password

string activationKey

Return Type: void

Exceptions: AmazonSimpleDBException, System.Net.WebException

 

 

Name: UpdateAttributeValue

Pre-Conditions: itemId cannot be null or empty string. attribute cannot be null or empty string. newAttributeValue cannot be null or empty string.

Post-Conditions: The item’s attribute value is updated in Amazon SimpleDB.

Description: Updates item’s attribute value.

Parameters:

string itemId

string attribute

string newAttributeValue

Return Type: void

Exceptions: AmazonSimpleDBException, System.Net.WebException

 

 

Name: ItemExists

Pre-Conditions: itemId cannot be null or empty string.

Post-Conditions: Returns true if item exists in Amazon SimpleDB, else return false.

Description: Check if item exists in SimpleDB.

Parameters:

string itemId

Return Type: bool

Exceptions: System.Net.WebException

 

 

Name: GetAttribute

Pre-Conditions: itemId cannot be null or empty string. attribute cannot be null or empty string.

Post-Conditions: Returns the given item’s attribute value.

Description: Gets the attribute’s value from the given item.

Parameters:

string itemId

string attribute

Return Type: string

Exceptions: System.Net.WebException

 

  

User Guide  for GameAnywhere Test Driver

The purpose of the test driver is to allow automated testing to be done after changes has been made, instead of manually testing each of the test cases.

The test driver requires the following classes: TestDriver, TestCase, PreCondition, Verifier, FolderDiff, FolderOperation and TestResult.

The test driver is also required to read in test file before it can start testing.
Test File

Test file are saved as .tcf format. The test case are required to follow a certain format.

A sample of the test file: UserTestCases.tcf

User|void

1~Login|string:evilnicksg@gmail.com,string:hello|bool:true|void

2~Login|string:james@gmail.com,string:helloworld1234|bool:false|void

3~Login|string:non-existance@gmails.com,string:blablabla|bool:false|void

4~Login|string:void,string:void|void|ArgumentException

5~Login|string:evilnicksg@gmail.com,string:hello|void|WebException

 

The first line of the test file specifies the Class and it’s constructor parameters, separated by “|”.

The above example is a User class with no parameters, specifies by “void”.

If there are constructor parameters required, we can specify them in the following manner.

 

[Class Name]|[Constructor parameter]

OfflineSync|int:0,List<Game>:{Warcraft 3+FIFA 10}

 

Here, we have a OfflineSync class with constructor taking in ‘int’ and a List of Game.

Parameters are separated by “,”. The different objects in the List are separated by “+”.

To specify an primitive data type, we specify them by using “:”. Example, int:0 will mean an integer with value 0.

To specify a List of objects, List<Object>:{Obj1+Obj2+Obj3}

 

To specify a Test Case,

We index each of a test case for a method with a number in increasing order.

 

[index]~[Method Name]|[Method Parameter]|[Return type or Expected output]|[Exception to be thrown]


Note: There is no spaces used for the test file. The test driver will not check or format test cases from the test file.


How to use the Test Driver

 

1. To read in a test file, click the browse button to choose or manually type in the path to the file.

2. To execute the test cases, click on the execute button.

3. After executing, the results will be shown in the Test Result text box.

 

Each method with the test case index will be shown. A true indicate it passes all verification otherwise, a false will be shown. Remarks on the problem will be following below it.

 
How to test GameLibrary and OfflineSync

To test the GameLibrary and OfflineSync, the games (which are supported) are required to be present in the testing computer. The Games save and configuration settings must be clean (ie. no changes has been made). The sample “SyncFolder” folder used for testing must be present.
 
 

TestDriver
 
TestDriver Class will store all the test cases and the result. To start the TestDriver, invoke the StartTest() method.
 
Private Data Members
 
Type: string
Name: className
Description: Stores the class name for the test cases.

 
Type: object[]
Name: constructorParameters

Description: Stores the constructor parameters. It can be of any type, primitive data type or List.

 


Name: object testClass

Description: Stores the class created and to be tested.


Type: List<TestCase>
Name: testCases
Description: Stores the list of test cases to be tested.


Type: string[]
Name: tests
Description: Stores array of the test cases to be tested.

 

 
Private Methods
 
Name: InitializeClassInfo

Pre-Conditions: Test file must exist and in the correct format to be read in by the test driver.

Post-Conditions: Test class will be created.

Description: Test class will be created based on the constructor parameters, which are being read in.

Parameters: -

Return Type: void

Exceptions: -

 

Name: InitializeTestCases
Pre-Conditions: Test file must exist and in the correct format to be read in by the test driver.
Post-Conditions: All test cases in the test file will be read in and added to the testCases list.

Description: Test cases will be created and added to the list.

Parameters: void

Return Type: void

Exceptions: -

 

Name: readConstructorArguments
Pre-Conditions: Test file must exist and in the correct format to be read in by the test driver
Post-Conditions: return the array of constructor parameters constructed based on the test file
Description: Test cases will be created and added to the list.

Parameters: string argumentList

Return Type: object[]

Exceptions: -

 

Name: readConstructorArguments
Pre-Conditions: Test file must exist and in the correct format to be read in by the test driver.

Post-Conditions: return the array of constructor parameters constructed based on the test file.
Description: Test cases will be created and added to the list.
Parameters: string argumentList

Return Type: object[]

Exceptions: -

 

Public Methods

 

Name: startTest

Pre-Conditions: Test class and test cases must be initialized.

Post-Conditions: return a list of TestCase with their results in them.

Description: Test cases will be created and added to the list.

Parameters: void

Return Type: List<TestCase>

Exceptions: -

 

Name: TestDriver

Pre-Conditions: Test class and test cases must be initialized.

Post-Conditions: return a list of TestCase with their results in them.

Description: Test cases will be created and added to the list.

Parameters: string testPath

Return Type: List<TestCase>

Exceptions: -


Additional Comments on How the Class Works:

The class requires the following library:

using System.Reflection;

using System.Diagnostics;

 

 
TestCase
 

Private Data Memebers


Type: string
Name: methodName

Description: Stores the name of the method being test for the test case.

 

Type: string

Name: testCase

Description: Stores the test case in string which is being read in from the test file


Type: object[]
Name: input

Description: Stores the input of the method


Type: object
Name: output

Description: Stores the actual output for the method.


Type: object
Name: expectedOutput

Description: Stores the expected output which is specified in the test file

 

Type: string

Name: exceptionThrown

Description: Stores the exception, which will be thrown, if any.

 

Type: TestResult

Name: testOutcome

Description: Stores the test result of the test case after tested.

 

Type: string

Name:  externalPath = @".\SyncFolder"

Description: Stores the external path for external drive.

 

Public Methods


Name: TestCase

Pre-Conditions: none

Post-Conditions: TestCase class will be initialized with the input parameter and the class it is associated to.

Description: Constructor

Parameters: string testCaseDescription, object classType

Return Type: void

Exceptions: -

 

Name: invokeTestMethod()

Pre-Conditions: The Test Class must be initialized.

Post-Conditions: Return the TestResult for the test case.

Description: invokeTestMethod will use Reflection.InvokeMember to test the method.

Parameters: ref object testClass

Return Type: TestResult

Exceptions: Exception (Class not found)

 

Private Methods


Name: GetParameters

Pre-Conditions: none.

Post-Conditions: “input” variable will be initialized with objects according to the test file specification.

Description: The method will make use of the parameter and create the input parameters accordingly.

Parameters: string parameters

Return Type: void

Exceptions: -


Name: GetExpectedOutput

Pre-Conditions: none.

Post-Conditions: “expectedOutput” variable will be initialized with the object according to the test file specification.

Description: The method will make use of the parameter and create the input parameters accordingly.

Parameters: string expected

Return Type: void

Exceptions: -

 

Name: CheckCondition

Pre-Conditions: none.

Post-Conditions: return the test result of the test case after checking the post-condition for each test case.

Description: To add a new test case, add you new condition to be verified in this method. CheckCondition will call Verifier which will do actual verification.

Parameters: string methodName, object testClass, object returnType

Return Type: TestResult

Exceptions: -

 

Additional Comments on How the Class Works:

The class requires the following library:

using System.Reflection;

using System.Diagnostics;

 


TestResult
TestResult stores the required fields to display outcome of the test.


Private Data Members


Type: bool

Name: result

Description: Stores the result of the test case.

 

Type: object

Name: returnType

Description: Stores the return object from the method.

 

Type: string
Name: remarks

Description: Stores the information about any errors or results.


Public Methods

 

Name: TestResult

Pre-Conditions: none

Post-Conditions: “result” variable to be initialized.

Description: Constructor

Parameters: bool outcome

Return Type: void

Exceptions: -

 

Name: AddRemarks

Pre-Conditions: none

Post-Conditions: comments will be added to the remarks.

Description: This method is to add comments to the “remark” variable.

Parameters: string comments

Return Type: void

Exceptions: -

 


PreCondition
PreCondition class contains the methods for setting up the pre-condition for the test cases.

 

Public Static Methods

 

Name: CleanUp

Pre-Conditions: SetPreCondition has make changes to the files.

Post-Conditions: The post-condition for the SetPreCondition method will be reverted.

Description: This method removes the changes made by the SetPreCondition.

Parameters: string methodName, int index

Return Type: void

Exceptions: -

 

Name: SetPreCondition

Pre-Conditions: valid methodName and index must be provided.

Post-Conditions: comments will be added to the remarks.

Description: This method is to add comments to the “remark” variable. Changes may be made to the input and testClass.

Parameters: int index,string methodName,ref object[] input, ref object testClass

                  (input parameters requires method name with index, the reference of the input for the method and the testClass for the method)

Return Type: void

Exceptions: -

 

Name: ToggleNetworkAdapter

Pre-Conditions: none

Post-Conditions: The computers network will be switch on / off. Returns true if action is success, else false.

Description: This method is to allow enabling/disabling of the network for testing of the online methods.

Parameters: bool onOff

Return Type: bool

Exceptions: -

 

Name: GetArrayList

Pre-Conditions: none

Post-Conditions: Return the ArrayList of objects. example: List<Game>:{Game1+Game2}

Description: This method will create the objects based on the string input specification

Parameters: string param

Return Type: ArrayList

Exceptions: -

 

Name: getGame

Pre-Conditions: Game must be installed in the computer.

Post-Conditions: Returns the game specified.

Description: This method will return the game object given the name of game if it exist.

Parameters: string name

Return Type: Game

Exceptions: -

 

Name: IsConnectedToInternet()

Pre-Conditions: none.

Post-Conditions: Returns true if connected to Internet, else false.

Description: This method checks the status of the Internet connection.

Parameters: void

Return Type: bool

Exceptions: -


Additional Comments on How the Class Works:

 The class requires the following library:

using Shell32;

using System.Threading;

using System.Runtime.InteropServices;

 

Note: Shell32 can be found at Windows/System32



PreCondition
FolderOperation contains all the methods required for folder operations during testing. Mainly, OfflineSync and OnlineSync class will use this method.


Private Data Memebers


Type: string

Name: sourcePath

Description: Stores the source file path.

 

Type:
Name: string targetPath

Description: Stores the target file path.

 

Private Data Memebers


Name: FolderOperation

Pre-Conditions: none.

Post-Conditions: FolderOperation will be initialized.

Description: Constructor

Parameters: string source, string target

Return Type: void

Exceptions: -

 

Public Static Memebers

 

Name: AddFileSecurity

Pre-Conditions: filename, the current windows user account name must be valid.

Post-Conditions: The specified file Security will be added to the file.

Description: This method allows the adding of the file access security.

Parameters: string fileName, string account, FileSystemRights rights, AccessControlType controlType

Return Type: void

Exceptions: -

 

Name: RemoveFileSecurity

Pre-Conditions: filename, the current windows user account name must be valid.

Post-Conditions: The specified file security will be removed from the file.

Description: This method allows the removing of the file access security.

Parameters: string fileName, string account, FileSystemRights rights, AccessControlType controlType

Return Type: void

Exceptions: -

 

Name: CopyDirectory

Pre-Conditions: source and destination must be valid.

Post-Conditions: The files from source directory path will be copied over to the destination directory path.

Description: This method is to allow enabling/disabling of the network for testing of the online methods.

Parameters: string sourceDirName, string destDirName

Return Type: void

Exceptions: -

 

Name: CopyOriginalSettings

Pre-Conditions: synclist must contain SyncAction with Games and the list of files to be copied. valid settings and direction must be specified

Post-Conditions: A copy of the files specified in the synclist will be copied to a test folder based on the settings and direction of the synchronization.

Description: This method will create the objects based on the string input specification. Settings: 1- Save, 2 - Configuration, 3 - both

Parameters: List<SyncAction> synclist, int settings, int direction

Return Type: void

Exceptions: -

 

Name: FindDifferences

Pre-Conditions: Game must be installed in the computer.

Post-Conditions: Returns the game specified.

Description: This method will return the game object given the name of game if it exist.

Parameters: string source, string target, bool direction

Return Type: List<string>

Exceptions: -

 

Name: GetDirectoryFileCount

Pre-Conditions: a valid file path must be given.

Post-Conditions: Return the number of files contained in the directory.

Description: This method count the number of files contained in the directory. Note: only files and not folders.

Parameters: string path

Return Type: int

Exceptions: -

 

Name: GetMD5HashFromFile

Pre-Conditions: valid file path must be specified.

Post-Conditions: Returns hash code of the file in string.

Description: This method will hash the file and return a hash code.

Parameters: string fileName

Return Type: string

Exceptions: -

 

Additional Comments on How the Class Works:

The class requires the following library:

using System.Security.Cryptography;

 


PreCondition
Verifier contains the methods to check the outcome of the each test case. After verifying the result, it will return the result via TestResult object.


Private Static Data Members


Type: string

Name: externalPath = @".\SyncFolder"

Description: Stores the SyncFolder path.


Type: List<string>

Name: supportedGames

Description: Stores the list of supported game name.


Public Static Memebers


Name: VerifyGetGameList , VerifySynchronizeGames , VerifyRestore , VerifyLogin, VerifyRegister , VerifyChangePassword , VerifyResendActivation

Pre-Conditions: The methods to be verified must be run with test case.

Post-Conditions: Returns the TestResult for the specific test case.

Description: Inside each of the methods, it contains the post-condition of the test cases, which is to be verified. It will set the result and any details of the test case in the TestResult (to                   be returned).

Parameters: int index, object returnType, object testClass, string exceptionThrown, object expectedOutput

Return Type: TestResult

Exceptions: -
