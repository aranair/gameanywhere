#summary Software architecture of GameAnywhere.

= High-Level Architecture =

http://lh4.ggpht.com/_-Xzk-2Bdr-I/S5-iBOIsmBI/AAAAAAAAAKg/pl0IsI3zVG8/highleveldiagram.JPG

This diagram depicts what happens in the program. The Controller is declared and the Controller starts up the GUI. The GUI interacts with the user. In a typical synchronization scenario, the user indicates the direction of the synchronization first. The GUI will request information regarding the games from Controller, which in turn calls
GameLibrary for the information to return to GUI. After the user selects the games to syncrhonize, GUI will then create a list of SyncAction with the games' information and send to Controller for synchronization. Controller will then provide the information
to OfflineSync class to process.
----

= Data Structure =

This section describes the various classes that store information.

== SyncError ==

SyncError stores all the information for an synchronization error. It would contain the unsuccessful sync file/folder path, the process that encountered this error and lastly, the error message.

== SyncAction ==

SyncAction contains the necessary information to sync a game. Each game would be wrapped in a SyncAction object. The game files to be sync and the files that were unsuccessfully synced are contained in this class. Initially, it contains an empty list of SyncError when it is created by the GUI. Only after OfflineSync processes the SyncAction then would the list of SyncError be filled.

There are basically two types of games files that can be sync, saved games files and game configuration files. User can choose to sync either one or both.

== Game ==

Game is a class to store the information regarding a Game. 

== GameLibrary ==

GameLibrary contains a list of Game. 


