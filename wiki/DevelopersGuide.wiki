#summary This document explains the high level software architecture of GameAnywhere for developers.

= Developer Guide v0.9 =

<wiki:toc max_depth="6" />


== High-Level Architecture ==

http://lh4.ggpht.com/_-Xzk-2Bdr-I/S5-iBOIsmBI/AAAAAAAAAKg/pl0IsI3zVG8/highleveldiagram.JPG

This diagram depicts what happens in the program. The Controller is declared and the Controller starts up the GUI. The GUI interacts with the user. In a typical synchronization scenario, the user indicates the direction of the synchronization first. The GUI will request information regarding the games from Controller, which in turn calls
GameLibrary for the information to return to GUI. After the user selects the games to syncrhonize, GUI will then create a list of SyncAction with the games' information and send to Controller for synchronization. Controller will then provide the information
to OfflineSync class to process.

== Data Structure ==

==== SyncError ====

SyncError stores all the information for an synchronization error. It would contain the unsuccessful sync file/folder path, the process that encountered this error and lastly, the error message.

==== SyncAction ==== 

SyncAction contains the necessary information to sync a game. Each game would be wrapped in a SyncAction object. The game files to be sync and the files that was unsuccessfully synced are contained in this class. Initially, it contains an empty list of SyncError when it is created by the GUI. Only after OfflineSync processes the SyncAction then would the list of SyncError be filled.

There are basically two types of games files that can be sync, saved games files and game configuration files. User can choose to sync either one or both.

==== Game ====

Game is a class to store the information regarding a Game. 

==== GameLibrary ====

GameLibrary contains a list of Game. 


== Processes ==


==== OfflineSync ====

*Brief Description:* This class handles the file/folder manipulation on the computer and the external storage device. The sync direction can only be set once, so as to prevent accidental re-assignment and affecting other methods. This method would create a folder call "syncFolder". This folder would contain the game files that is assume to be in the external storage device.

The folder structure in "syncFolder" is that its subfolders are the game folder(s). Each would game folder is named after the game. In each game folder, it would contain subfolder(s) of name "config" and/or "savedGame". These folder would save the game files as its name suggest.

*Steps for synchronizing from External storage device to Computer*
 #1) Create a backup folder in the game file parent directory
 #2) Move original game files in the computer into the backup folder
 #3) Copy the game files in the external storage device into the computer

*Steps for synchronizing from Computer to External storage device*
 #1) Remove existing game files in external storage device
 #2) Create the necessary game folder structure in the external storage device
 #3) Copy game files from computer into the new directory

*Steps for restore*
 #1) Remove existing game files
 #2) Move game files from backup folder into it's original directory
 #3) Remove backup folder

== Reference == 
[http://docs.google.com/Doc?docid=0AaWx7AIMLnNSZGNqY3JiMmdfNWcycDI1N2Zi&hl=en API]