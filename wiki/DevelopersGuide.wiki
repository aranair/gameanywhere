#summary This document explains the high level software architecture of GameAnywhere for developers.

= Developer Guide V0.9 =

<wiki:toc max_depth="2" />

----
== High-Level Architecture ==

http://lh4.ggpht.com/_-Xzk-2Bdr-I/S5-iBOIsmBI/AAAAAAAAAKg/pl0IsI3zVG8/highleveldiagram.JPG

This diagram depicts what happens in the program. The Controller is declared and the Controller starts up the GUI. The GUI interacts with the user. In a typical synchronization scenario, the user indicates the direction of the synchronization first. The GUI will request information regarding the games from Controller, which in turn calls
GameLibrary for the information to return to GUI. After the user selects the games to syncrhonize, GUI will then create a list of SyncAction with the games' information and send to Controller for synchronization. Controller will then provide the information
to OfflineSync class to process.
----
== Data Structure ==

This section describes the various classes that store information.

=== SyncError ===

SyncError stores all the information for an synchronization error. It would contain the unsuccessful sync file/folder path, the process that encountered this error and lastly, the error message.

=== SyncAction ===

SyncAction contains the necessary information to sync a game. Each game would be wrapped in a SyncAction object. The game files to be sync and the files that was unsuccessfully synced are contained in this class. Initially, it contains an empty list of SyncError when it is created by the GUI. Only after OfflineSync processes the SyncAction then would the list of SyncError be filled.

There are basically two types of games files that can be sync, saved games files and game configuration files. User can choose to sync either one or both.

=== Game ===

Game is a class to store the information regarding a Game. 

=== GameLibrary ===

GameLibrary contains a list of Game. 

----
== Processes ==

This section deals with classes that do most of the processing in the software.

=== GameLibrary ===

*Brief Description:* The GameLibrary class, contains all the methods and information to initialize installed games into a list of games, that will contain all the appropriate paths to the config files and saved game files of each individual game.

It will also resolve and return the common set of games that are found in both the source and target paths according to the synchronization direction
chosen by the user, through the method GetGameList(direction). The direction of synchronization must be properly defined with this method.


*Steps to follow to add more game support:*
 # Create method to use registry entry to check existence of the new game.
 # Create a new instance of Game object.
 # Edit the appropriate information for the Game to work:
{{{
- configList = The list of paths to the configuration folders or files of the game.
- saveList   = The list of paths to the saved game folders or files of the game.
- configParentPath = the folder in which all the config files/folders are in.
- gameName = The name of the game.
- install path = The install path of the game ( found in the registry )

- Private helper methods have been made to find the documents path, the type of OS of user, registry software path, program files path to aid in finding generic paths for all 3 OS:
  windows xp, windows vista, and windows 7.
- Methods to edit the configList and savedGameList are preferably seperated because of step 4.
}}}
 # For the sync direction of external to computer, EditConfigAndSavedGameLists() function is to be editted to support the new game as well. Each new game instance in the common list between the external and the computer, upon finding that the thumbdrive has the appropriate folders for the synchronization, MUST be initialized with config/savedList containing the paths to the files in the external thumbdrive instead of paths to the computer's files. 
 # You're set to synchronize. If you would like to add icons to your game in the program, you would have to edit the GUI class to load your icons as well.

=== OfflineSync ===

*Brief Description:* This class handles the file/folder manipulation on the computer and the external storage device. The sync direction can only be set once, so as to prevent accidental re-assignment and affecting other methods. This method would create a folder call "syncFolder". This folder would contain the game files that is assume to be in the external storage device.

The folder structure in "syncFolder" is that its subfolders are the game folder(s). Each would game folder is named after the game. In each game folder, it would contain subfolder(s) of name "config" and/or "savedGame". These folder would save the game files as its name suggest.

*Steps for synchronizing from External storage device to Computer:*
 # Create a backup folder in the game file parent directory
 # Move original game files in the computer into the backup folder
 # Copy the game files in the external storage device into the computer

*Steps for synchronizing from Computer to External storage device:*
 # Remove existing game files in external storage device
 # Create the necessary game folder structure in the external storage device
 # Copy game files from computer into the new directory

*Steps for restore:*
 # Remove existing game files
 # Move game files from backup folder into it's original directory
 # Remove backup folder

-----
==Design of Login system==
====Overview====
To provide users with their own gameanywhere account, we need a database to store account information and Amazon Web Services(AWS) SimpleDB was chosen.

====How the Components Interact====
[http://img30.imageshack.us/img30/381/onlinecomponents.jpg]

The User component consists of user related functions such as Login, Register, ChangePassword and Logout.

In AWS SimpleDB, a table is called a domain while rows are identified as items, and columns are attributes. The unique key is known as the item name. So here is an overview of the SimpleDB component, it is meant for database functions like:
 * Inserting an item into Amazon SimpleDB, use the InsertItem method.
 * Getting an item’s attribute value, use the GetAttribute method.
 * Updating an item’s attribute value, use the UpdateAttributeValue method.
 * Checking if an item exists in the domain, use the ItemExists method.

AmazonSimpleDBClient component mainly deals with amazon simpleDB web service directly by sending requests and receiving responses from it. It hides all the low level amazon webservices programming like authentication and error handling. You may download the latest Amazon Web Services SDK for .NET from http://aws.amazon.com/sdkfornet/.

====Data structure of Domain====
The domain that has been created and we will be using is called “UserAccounts”. Each item has the following attributes: ItemName, Password, ActivationStatus, ActivationKey. The ItemName acts like a unique key, there should be no duplicates in the domain. Every attribute is of string datatype as it is a limitation of AWS SimpleDB.

-----
== Reference == 

[http://docs.google.com/Doc?docid=0AaWx7AIMLnNSZGNqY3JiMmdfNWcycDI1N2Zi&hl=en API]