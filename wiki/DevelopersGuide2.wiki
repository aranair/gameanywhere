#summary For developers only.
#labels Phase-Requirements,Phase-Design,Phase-Implementation,Featured
#sidebar TOC

*Welcome to !GameAnywhere.*

!GameAnywhere is a file synchronization software that enables gamers to bypass the hassle on reconfiguring game settings and easily have their saved game data with them anywhere, anytime.

<wiki:toc max_depth="2" />

----

= Getting Started =

In this section, we would introduce the basic features of !GameAnywhere and what you will need to develop !GameAnywhere.

== Software Requirements ==
  * Windows operating system, XP and above.
  * .Net 3.5 framework installed.


== Features of !GameAnywhere==

 * Synchronizes game files between thumb drive and computer or vice versa with just a few clicks with our intuitive graphical user interface.


 * Automatically detects the games installed on the computer and offer you the appropriate synchronization options.


 * Restores the computer to its original state after you're done playing on the computer with the files you have synchronized.


 * Supports World of Warcraft, Warcraft 3: The Frozen Throne, FIFA 10 and Football Manager 2010. 

 * No installation needed.


== Screenshots ==

http://lh5.ggpht.com/_-Xzk-2Bdr-I/S5zmo-_xu0I/AAAAAAAAAJA/u5L7m0Aqyqw/startscreen.JPG

http://lh3.ggpht.com/_-Xzk-2Bdr-I/S5znfKsCPmI/AAAAAAAAAJU/lBsQmtZn6xw/choosegamescreen.JPG

----

= Software Architecture =

In this section, we will give you a high level overview of the components in !GameAnywhere.

http://lh6.ggpht.com/_-Xzk-2Bdr-I/S7HEsTA3TgI/AAAAAAAAALA/wPhf7Ql4slM/highleveldiagram.JPG

This diagram depicts what happens in the program. 

The Controller is declared and the Controller starts up the GUI. The GUI interacts with the user. 

In a typical synchronization scenario, the user indicates the direction of the synchronization first. The GUI will request information regarding the games from Controller, which in turn calls GameLibrary for the information to return to GUI. 

After the user selects the games to synchronize, GUI will then create a list of SyncAction with the games' information and send it to Controller for synchronization. Controller will then provide the information to OfflineSync class to process.

----


= Software Data Structure = 

This section describes the various classes that were used to store information.


== Game ==

Game is a class that stores the necessary information regarding a Game, i.e. game file path, install path, game name. 

=== See Also === 
  * [DevelopersGuide2#GameLibrary_Class GameLibrary Class]



== !SyncError ==

SyncError stores the information for an synchronization error. It would contain the unsuccessful sync file/folder path, the process that encountered this error and lastly, the error message.

=== See Also ===
  * [DevelopersGuide2#OfflineSync_Class OfflineSync Class]



== !SyncAction ==

SyncAction contains the necessary information to sync a game. A [DevelopersGuide2#Game Game] object and a list of [DevelopersGuide2#SyncError SyncError] would be wrapped in a SyncAction object. The unsuccessfully synced files will be related to the [DevelopersGuide2#Game Game] object. Initially, it contains an empty list of !SyncError when it is created by the GUI. 

!SyncAction also contain the sync action, which indicates what type of game files to be synced. There are basically two types of games files, saved games files and game configuration files. User can choose to sync either one or both.

=== See Also ===
  * [DevelopersGuide2#OfflineSync_Class OfflineSync Class]
  * [DevelopersGuide2#GameLibrary_Class GameLibrary Class]


----

= Class Summary = 

== !GameLibrary Class ==

The GameLibrary class, contains all the methods and information to initialize installed games into a list of games, that will contain all the appropriate paths to the config files and saved game files of each individual game.

It will also resolve and return the common set of games that are found in both the source and target paths according to the synchronization direction
chosen by the user, through the method GetGameList(direction). The direction of synchronization must be properly defined with this method.


== !OfflineSync Class ==
This class handles the file/folder manipulation on the computer as well as on the external storage device. The sync direction determine how the game files are transferred. 

=== See Aslo ===
   * [DevelopersGuide2#Game_Files_Storage_Structure Game Files Storage Structure]

----

= Game Files Storage Structure =

In !GameAnywhere, we are concerned with the two types of game files. They are *Configuration* files and *Saved Game* files. 

Games files on the computer are detected automatically (see [DevelopersGuide2#Games_Detection Games Detection]). 

This is how game files are stored on the external device:

A general structure looks like this:
  * !GameAnywhere.exe
  * SyncFolder
    * Game 1
      * config
      * savedGame
    * Game 2
      * config
    * ...


*Example:* 

http://game-anywhere.com/images/folder_structure.jpg

Use camel case for subfolder names i.e. "savedGame". 

== !SyncFolder ==

!GameAnywhere would create a folder to store all the games files that you would want to save. This folder is called *SyncFolder*. It would be located at the same directory as !GameAnywhere.exe.

The subfolders in SyncFolder are the game folder(s). Each of the game folder is named after a game. 

Configuration and Saved game files are store in their respective folder under a game folder. 

----

= Games Detection =

How games are detected on the Computer.

For version 1.0, game detection is hard coded, by reading a registry key for each individual game and finding the *installpath* variable value of the game's registry entry.

By first checking the existence of the registry key, then checking the existence of the game folder at the install path, we can determine if a particular game exists on the system running the application. The paths to files and folders for each game are hard coded, and these paths will be initialized into the corresponding config list, and saved game list of a Game Object. Other information about a game will also be found and loaded into the Game Object which serves primarily as a data encapsulation.

_For the upcoming version (v2.0), there will be a new implementation that involves parsing some variables from text files to initialize the games._

----

= Adding Games =

This is how to extend the list of supported games.

== Steps to follow to add more game support ==

 # Create method to use registry entry to check existence of the new game.
 # Create a new instance of Game object.
 # Edit the appropriate information for the Game to work:
{{{
- configList = The list of paths to the configuration folders or files of the game.
- saveList   = The list of paths to the saved game folders or files of the game.
- configParentPath = the folder in which all the config files/folders are in.
- gameName = The name of the game.
- install path = The install path of the game ( found in the registry )

- Private helper methods have been made to find the documents path, the type of OS of user, registry software path, program files path to aid in finding generic paths for all 3 OS:
  windows xp, windows vista, and windows 7.
- Methods to edit the configList and savedGameList are preferably seperated because of step 4.
}}}
 # For the sync direction of external to computer, EditConfigAndSavedGameLists() function is to be editted to support the new game as well. Each new game instance in the common list between the external and the computer, upon finding that the thumbdrive has the appropriate folders for the synchronization, MUST be initialized with config/savedList containing the paths to the files in the external thumbdrive instead of paths to the computer's files. 
 # You're set to synchronize. If you would like to add icons to your game in the program, you would have to edit the GUI class to load your icons as well.

-----

= Offline Synchronization =

Offline synchronization includes synchronizing between the computer and the [DevelopersGuide2#SyncFolder SyncFolder]. [DevelopersGuide2#SyncFolder SyncFolder] is located on an external device.

http://farm3.static.flickr.com/2776/4478572596_fc9a553fca_o.jpg

== External Device to Computer Sync == 

*Steps for synchronizing from External storage device to Computer:*
 # Create a backup folder in the game file parent directory.
   * If backup folder exists, skip backup process.
 # Move original game files in the computer into the backup folder to complete backup process.
   * If backup is not successful, skip sync for game.
 # Copy the game files in the external storage device into the computer.


== Computer to External Device Sync ==

*Steps for synchronizing from Computer to External storage device:*
 # Remove existing game files in external storage device.
 # Create the necessary game folder structure in the external storage device.
 # Copy game files from computer into the new directory.


== Restore Computer to Original Game State ==

*Steps for restore:*
 # Remove game files on computer.
 # Move game files from backup folder into it's original directory.
 # Remove backup folder.

----

= API Reference =

Click here for !GameAnywhere [http://api.game-anywhere.com/index.html library].