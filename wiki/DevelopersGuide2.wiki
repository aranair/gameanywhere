#summary For developers only.


*Welcome to GameAnywhere.*

GameAnywhere is a file synchronization software that enables gamers to bypass the hassle on reconfiguring game settings and easily have their saved game data with them anywhere, anytime.

<wiki:toc max_depth="2" />

----

= Getting Started =

In this section, we would introduce the basic features of GameAnywhere and what you will need to develop GameAnywhere.

== Software Requirements ==
  * Windows operating system, XP and above.
  * .Net 3.5 framework installed.


== Features of !GameAnywhere==

 * Synchronize game files between thumb drive and computer or vice versa with just a few clicks with our intuitive graphical user interface.


 * Automatically detect the games installed on the computer and offer you the appropriate synchronization options.


 * Restore the computer to its original state after you're done playing on the computer with the files you have synchronized.


 * Supports World of Warcraft, Warcraft 3, FIFA 10 and Football Manager 2010. 

 * No installation needed.


== Screenshots ==

http://lh5.ggpht.com/_-Xzk-2Bdr-I/S5zmo-_xu0I/AAAAAAAAAJA/u5L7m0Aqyqw/startscreen.JPG

http://lh3.ggpht.com/_-Xzk-2Bdr-I/S5znfKsCPmI/AAAAAAAAAJU/lBsQmtZn6xw/choosegamescreen.JPG

----

= Software Architecture =

In this section, we would give you a high level overview of the components in GameAnywhere.

http://lh4.ggpht.com/_-Xzk-2Bdr-I/S5-iBOIsmBI/AAAAAAAAAKg/pl0IsI3zVG8/highleveldiagram.JPG
This diagram depicts what happens in the program. 

The Controller is declared and the Controller starts up the GUI. The GUI interacts with the user. 

In a typical synchronization scenario, the user indicates the direction of the synchronization first. The GUI will request information regarding the games from Controller, which in turn calls GameLibrary for the information to return to GUI. 

After the user selects the games to synchronize, GUI will then create a list of SyncAction with the games' information and send it to Controller for synchronization. Controller will then provide the information to OfflineSync class to process.

----


= Software Data Structure = 

This section describes the various classes that were used to store information.


{{{
== Data Class name ==

<Class diagram>

//Description, what data is stored and what are the data used for

=== See Also ===
  * //Class that uses this data structure

}}}

== Sync Error ==

{{{
<Class diagram>
}}}

SyncError stores all the information for an synchronization error. It would contain the unsuccessful sync file/folder path, the process that encountered this error and lastly, the error message.

=== See Also ===
  * [DevelopersGuide2#OfflineSync_Class OfflineSync Class]



== Sync Action ==

{{{
<Class diagram>
}}}

SyncAction contains the necessary information to sync a game. Each game would be wrapped in a SyncAction object. The game files to be sync and the files that were unsuccessfully synced are contained in this class. Initially, it contains an empty list of SyncError when it is created by the GUI. Only after OfflineSync processes the SyncAction then would the list of SyncError be filled.

There are basically two types of games files that can be sync, saved games files and game configuration files. User can choose to sync either one or both.

=== See Also ===
  * [DevelopersGuide2#OfflineSync_Class OfflineSync Class]
  * [DevelopersGuide2#GameLibrary_Class GameLibrary Class]



== Game ==

{{{
<Class diagram>
}}}

Game is a class to store the information regarding a Game. 

=== See Also === 
  * [DevelopersGuide2#GameLibrary_Class GameLibrary Class]



----

= Class Summary = 

== !GameLibrary Class ==

The GameLibrary class, contains all the methods and information to initialize installed games into a list of games, that will contain all the appropriate paths to the config files and saved game files of each individual game.

It will also resolve and return the common set of games that are found in both the source and target paths according to the synchronization direction
chosen by the user, through the method GetGameList(direction). The direction of synchronization must be properly defined with this method.


== !OfflineSync Class ==
This class handles the file/folder manipulation on the computer as well as on the external storage device. The sync direction determine how the game files are transferred. 

=== See Aslo ===
   * [DevelopersGuide2#Game_Files_Storage_Structure Game Files Storage Structure]

----

= Game Files Storage Structure =

This method would create a folder name "syncFolder" that would . This folder would contain the game files that is assume to be in the external storage device.

The folder structure in "syncFolder" is that its subfolders are the game folder(s). Each would game folder is named after the game. In each game folder, it would contain subfolder(s) of name "config" and/or "savedGame". These folder would save the game files as its name suggests.